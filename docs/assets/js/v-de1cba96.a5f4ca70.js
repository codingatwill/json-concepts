(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[4752],{8375:(n,e,s)=>{"use strict";s.r(e),s.d(e,{data:()=>a});const a={key:"v-de1cba96",path:"/specs/08-references/01-defining-a-reference.html",title:"Defining A Reference",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"References Can Only Be Defined at the Root",slug:"references-can-only-be-defined-at-the-root",children:[]}],filePathRelative:"specs/08-references/01-defining-a-reference.md"}},9909:(n,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});const a=(0,s(6252).uE)('<h1 id="defining-a-reference"><a class="header-anchor" href="#defining-a-reference">#</a> Defining A Reference</h1><p>A key with a <code>#</code> prefix at the root of the file means that it is a definition of a reusable reference. When it is encountered in value side, it means that reference is being used. Below is an example.</p><p><code>CONCEPTS 1: class.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$class+&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#properties&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;#properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$property*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Above there is a <code>#properties</code> reference in which <code>$property</code> concept is defined and it is used under <code>$class</code> concept. This definition is equivalent to below definition;</p><p><code>CONCEPTS 2: class.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$class+&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$property*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>References does not have an effect in concepts shadow and schema validation, so <code>CONCEPTS 1</code> has exactly the same shadow and schema validation behavior with <code>CONCEPTS 2</code>.</p><h2 id="references-can-only-be-defined-at-the-root"><a class="header-anchor" href="#references-can-only-be-defined-at-the-root">#</a> References Can Only Be Defined at the Root</h2><p>Below is an invalid definition because <code>#method</code> is defined under <code>$class</code> concept instead of being defined at the root;</p><p><code>CONCEPTS: class.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$class+&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$method*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#method&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;#method&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;$parameter*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;returns&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>ERROR: &#39;class.concepts.json&#39; is not valid, &#39;#method&#39; should be defined at the</code><code>root.</code></p>',13),o={render:function(n,e){return a}}}}]);