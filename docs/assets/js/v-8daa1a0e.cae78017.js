(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[2509],{4958:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-8daa1a0e",path:"/",title:"json concepts",lang:"en-US",frontmatter:{title:"json concepts",home:!0,footer:"MIT License - Copyright (C) 2021, Cihan Deniz"},excerpt:"",headers:[{level:2,title:"Contribution",slug:"contribution",children:[]}],filePathRelative:"README.md"}},8247:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>j});var t=a(6252);const p=(0,t.uE)('<p><strong>json concepts</strong> is a meta-schema specification in JSON format which allows you to create a conceptual design for any type of data structure, especially those that represent a schema.</p><p>It is designed for definitions to have the same hierarchy with the schema files they validate. So by looking at a definition, you will roughly understand what schema it expects.</p><p>Here is a quick example.</p><p><code>CONCEPTS: endpoint.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$endpoint:path+&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$method:method+&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;$parameter*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;response?&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$responseType&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;$status:status&quot;</span> <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;models?&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$model+&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;$field*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;@types&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^\\\\/.*$&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token number">500</span> <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>This definition introduces <code>$endpoint</code>, <code>$method</code>, <code>$parameter</code>, <code>$model</code> and <code>$field</code> concepts. <code>$endpoint</code> is of type <code>:path</code>, <code>$method</code> is <code>:method</code>, and so on. <code>@types</code> meta-data lists all custom types. Long story short, this definition validates a schema like this one;</p><p><code>SCHEMA: users.endpoint.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;@concepts&quot;</span><span class="token operator">:</span> <span class="token string">&quot;endpoint.concepts.json&quot;</span><span class="token punctuation">,</span>\n    \n    <span class="token property">&quot;/users&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;GET&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">404</span> <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;POST&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;surname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span> <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;models&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;user&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;surname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',8),o=(0,t.Uk)("To understand how you can make use of "),e=(0,t.Wm)("strong",null,"json concepts",-1),c=(0,t.Uk)(", have a look at its "),u=(0,t.Uk)("use cases"),r=(0,t.Uk)("."),l=(0,t.Uk)("Or you can directly dive into the "),i=(0,t.Uk)("specs"),k=(0,t.Uk)("."),b=(0,t.Wm)("h2",{id:"contribution"},[(0,t.Wm)("a",{class:"header-anchor",href:"#contribution"},"#"),(0,t.Uk)(" Contribution")],-1),m=(0,t.Uk)("Thanks for your interest in "),d=(0,t.Wm)("strong",null,"json concepts",-1),q=(0,t.Uk)(". If you want to ask a question or make a contribution, just go to the "),h={href:"https://github.com/codingatwill/json-concepts",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Uk)("github repository"),g=(0,t.Uk)(". If you view this page from github, then go ahead and open an issue to ask a question or create a pull request to make a contribution."),f=(0,t.Wm)("p",null,"See you around 👋",-1),j={render:function(n,s){const a=(0,t.up)("RouterLink"),j=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,(0,t.Wm)("p",null,[o,e,c,(0,t.Wm)(a,{to:"/use-cases/"},{default:(0,t.w5)((()=>[u])),_:1}),r]),(0,t.Wm)("p",null,[l,(0,t.Wm)(a,{to:"/specs/"},{default:(0,t.w5)((()=>[i])),_:1}),k]),b,(0,t.Wm)("p",null,[m,d,q,(0,t.Wm)("a",h,[y,(0,t.Wm)(j)]),g]),f],64)}}}}]);