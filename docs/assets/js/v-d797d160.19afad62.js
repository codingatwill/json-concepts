(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[2223],{2582:(t,s,e)=>{"use strict";e.r(s),e.d(s,{data:()=>n});const n={key:"v-d797d160",path:"/specs/",title:"Introduction",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"About Syntax",slug:"about-syntax",children:[]},{level:2,title:"About Specifications",slug:"about-specifications",children:[{level:3,title:"Another Case",slug:"another-case",children:[]}]},{level:2,title:"Final Word",slug:"final-word",children:[]}],filePathRelative:"specs/README.md"}},6460:(t,s,e)=>{"use strict";e.r(s),e.d(s,{default:()=>a});const n=(0,e(6252).uE)('<h1 id="introduction"><a class="header-anchor" href="#introduction">#</a> Introduction</h1><p>This section includes all the specifications of <strong>json concepts</strong>. A file that ends with <code>.concepts.json</code> is referred as a concepts definition throughout this document. Below is an example of a concepts definition;</p><p><code>CONCEPTS: service.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$service+&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$parameter*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$responseType&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>This definition represents a meta-schema that will validate a schema like below;</p><p><code>SCHEMA: greeting.service.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;sayHello&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="about-syntax"><a class="header-anchor" href="#about-syntax">#</a> About Syntax</h2><p>To keep its syntax short, <strong>json concepts</strong> makes a heavy use of special characters. This is a design decision to have an expressive syntax, just like regular expressions.</p><p>We ask two basic questions when choosing a special character;</p><ol><li>Does it mean only one thing?</li><li>Is it familiar?</li></ol><p>If the answer is yes to both questions, then that special character is a good choice.</p><p>A special character is considered to be familiar either because it has the same meaning in another well-known language or specification, or because its name or shape makes sense in the context it is used.</p><p>Any special character that doesn&#39;t suit well to this approach is subject to a change.</p><table><thead><tr><th>Character</th><th>Meaning</th><th>Familiarity</th><th>Status</th></tr></thead><tbody><tr><td>$</td><td>variable</td><td>variables in php, bash, powershell</td><td>👍</td></tr><tr><td>#</td><td>macro</td><td>c, c++, c# preprocessor directives</td><td>👍</td></tr><tr><td>!</td><td>force</td><td>css important</td><td>👍</td></tr><tr><td>@</td><td>meta-data</td><td>java annotations</td><td>👍</td></tr><tr><td>?</td><td>zero or one</td><td>regex, ternary operator</td><td>👍</td></tr><tr><td>+</td><td>one or more</td><td>regex</td><td>👍</td></tr><tr><td>{,}</td><td>quantifier</td><td>regex</td><td>👍</td></tr><tr><td>:</td><td>type</td><td>specifying type in uml, swift or scala</td><td>👍</td></tr><tr><td>*</td><td>zero or more &amp; any</td><td>regex &amp; file path wildcard</td><td>🤔</td></tr><tr><td>**</td><td>any child</td><td>file path wildcard</td><td>👍</td></tr><tr><td>/</td><td>path</td><td>file paths, urls</td><td>👍</td></tr><tr><td>..</td><td>parent</td><td>file paths</td><td>👍</td></tr><tr><td>...</td><td>spread</td><td>javascript spread operator</td><td>👍</td></tr><tr><td>\\</td><td>escape</td><td>escape character</td><td>👍</td></tr><tr><td>&amp;</td><td>and</td><td>bitwise and</td><td>👍</td></tr><tr><td>|</td><td>or</td><td>bitwise or</td><td>👍</td></tr><tr><td>[]</td><td>set default key</td><td>javascript property accessor</td><td>🤔</td></tr><tr><td>()</td><td>set default value &amp; pluralization</td><td>function call &amp; plain english, e.g. item(s)</td><td>🤔</td></tr><tr><td>^</td><td>from beginning</td><td>regex start</td><td>🤔</td></tr><tr><td>-</td><td>shift left</td><td>minus sign</td><td>🤔</td></tr></tbody></table><h2 id="about-specifications"><a class="header-anchor" href="#about-specifications">#</a> About Specifications</h2><p>Every specification introduces a new feature of <strong>json concepts</strong>. Each spec is written assuming that you have read the specs before that one. There will be one or more cases to clearly define a feature. Just like above examples, there will be a sample concepts definition and a sample schema to demonstrate a case.</p><p><code>CONCEPTS: sample.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$sample*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$definition&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>These concepts definitions are usually followed by a schema;</p><p><code>SCHEMA: schema.sample.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;schema&quot;</span><span class="token operator">:</span> <span class="token string">&quot;defined&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="another-case"><a class="header-anchor" href="#another-case">#</a> Another Case</h3><p>When there is more than one case, following cases will be in a different heading.</p><p>If there is a need for an example code, it will be in <code>javascript</code>.</p><p><code>CODE: sample.js</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> schema <span class="token operator">=</span> Schema<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;schema.sample.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sample.concepts.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>When the case is an error case, expected error message will be specified like this;</p><p><code>ERROR: an expected error message</code></p><p>This does not mean that such an error message is expected word by word. It is rather a suggestion for a potential implementation.</p><h2 id="final-word"><a class="header-anchor" href="#final-word">#</a> Final Word</h2><p>Although <strong>json concepts</strong> is only a specification, there is a Node.js implementation as well. This implementation serves as a proof of concept that validates this specification.</p>',32),a={render:function(t,s){return n}}}}]);