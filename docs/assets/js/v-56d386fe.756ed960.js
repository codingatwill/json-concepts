(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[8001],{3725:(s,e,a)=>{"use strict";a.r(e),a.d(e,{data:()=>n});const n={key:"v-56d386fe",path:"/specs/06-literals/07-escaping-special-characters.html",title:"Escaping Special Characters",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"specs/06-literals/07-escaping-special-characters.md"}},6209:(s,e,a)=>{"use strict";a.r(e),a.d(e,{default:()=>c});const n=(0,a(6252).uE)('<h1 id="escaping-special-characters"><a class="header-anchor" href="#escaping-special-characters">#</a> Escaping Special Characters</h1><p>A literal name can contain a special character using escape sequences &#39;\\&#39;. Below is an example of both key and value literals;</p><p><code>CONCEPTS: escape.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;\\\\$service\\\\+&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\\\$response&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Below is the only valid schema for this concepts definition, because it only contains literals;</p><p><code>SCHEMA: concepts.escape.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$service+&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$response&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',7),c={render:function(s,e){return n}}}}]);