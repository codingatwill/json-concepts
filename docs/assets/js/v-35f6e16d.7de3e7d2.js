(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[44],{1219:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-35f6e16d",path:"/roadmap/08-multiple-variable-types.html",title:"Multiple Definitions Types",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"roadmap/08-multiple-variable-types.md"}},9365:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="multiple-definitions-types"><a class="header-anchor" href="#multiple-definitions-types">#</a> Multiple Definitions Types</h1><blockquote><p>TBD -&gt; a definition should be able to conform to one of the definitions Should also support multiple types for object arrays</p></blockquote><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$schema*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#ref | #schema&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;$class*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#properties &amp; #methods&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$schema*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;\\\\$ref&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$reference&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',4),p={render:function(n,s){return e}}}}]);