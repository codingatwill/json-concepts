(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[5899],{657:(e,o,t)=>{"use strict";t.r(o),t.d(o,{data:()=>s});const s={key:"v-07307c0b",path:"/use-cases/",title:"Introduction",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Anatomy of a Use Case",slug:"anatomy-of-a-use-case",children:[]}],filePathRelative:"use-cases/README.md"}},133:(e,o,t)=>{"use strict";t.r(o),t.d(o,{default:()=>a});const s=(0,t(6252).uE)('<h1 id="introduction"><a class="header-anchor" href="#introduction">#</a> Introduction</h1><p>A software has many aspects with each of these aspects having their own concepts. Assume that you develop a web based software in which there is a board where people can post photos and view photos of others. This software will likely to have;</p><ul><li>UI aspect: a UI app to post and browse photos</li><li>API aspect: an API that handles photo posting and listing</li><li>DevOps aspect: a CI mechanism to manage deployments</li></ul><p>For every aspect of this software, there are different concepts. For example;</p><ul><li>From a UI aspect, there are routing concepts</li><li>From an API aspect, there are endpoint concepts</li><li>From a DevOps aspect, there are deployment concepts</li></ul><p><strong>json concepts</strong> can help you to define these concepts. Using your concept definitions you can create and validate schemas for every aspect. These schemas will have certain things in common, for example a routing schema may differ for each environment. So environment is a concept for UI aspect as well. This means transforming a schema from one aspect into another may also help you to organize your source code.</p><p>For now this section includes a couple of use cases that represent the motivation behind developing <strong>json concepts</strong>. As it finds more real life usage, we will add more examples.</p><h2 id="anatomy-of-a-use-case"><a class="header-anchor" href="#anatomy-of-a-use-case">#</a> Anatomy of a Use Case</h2><p>Each use case follows below structure;</p><ul><li>Problem definition</li><li>Short example of the problem</li><li>A solution using <strong>json concepts</strong></li><li>A solution without <strong>json concepts</strong></li></ul>',10),a={render:function(e,o){return s}}}}]);