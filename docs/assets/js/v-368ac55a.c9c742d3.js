(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[5529],{4081:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-368ac55a",path:"/use-cases/01-configuration-files.html",title:"Configuration Files",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Example Case",slug:"example-case",children:[]},{level:2,title:"With Concepts",slug:"with-concepts",children:[]},{level:2,title:"Without Concepts",slug:"without-concepts",children:[]}],filePathRelative:"use-cases/01-configuration-files.md"}},8780:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="configuration-files"><a class="header-anchor" href="#configuration-files">#</a> Configuration Files</h1><p>Assume you have an application that requires a configuration file to run. You need to create a schema for this file and write a code to read, validate and parse this file according to the schema.</p><h2 id="example-case"><a class="header-anchor" href="#example-case">#</a> Example Case</h2><p>Let&#39;s say your application is a web crawler that visits certain urls periodically and log their contents to a database.</p><h2 id="with-concepts"><a class="header-anchor" href="#with-concepts">#</a> With Concepts</h2><p>You can define configuration concepts and then you can validate and load a configuration file using that definition. Below is the concepts definition;</p><p><code>CONCEPTS: config.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;!$environment*&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$database:db&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$connection&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;$period(s)[cron]*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;$urls&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n    <span class="token property">&quot;@types&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;db&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;postgresql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mysql&quot;</span> <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Below is an example configuration file;</p><p><code>SCHEMA: my-app.config.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;development&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;mysql&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Server=dev.db;Database=my-app;Uid=...;Pwd=...;&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;postgresql&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Driver={PostgreSQL};Server=dev.db;Port=5432;Database=my-app;Uid=...;Pwd=...;&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;0 0 12 1/1 * ? *&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;https://a.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://b.com&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;0 0 0/1 1/1 * ? *&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;https://x.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://y.com&quot;</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Let&#39;s load this <code>config</code> file using its concepts definition;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> jc<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;my-app.config.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;config.concepts.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shadow<span class="token punctuation">;</span>\n\n<span class="token function">connectDB</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>environment<span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">]</span><span class="token punctuation">.</span>database<span class="token punctuation">.</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconfig<span class="token punctuation">.</span>periods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">period</span> <span class="token operator">=&gt;</span> <span class="token function">process</span><span class="token punctuation">(</span>period<span class="token punctuation">.</span>cron<span class="token punctuation">,</span> period<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="without-concepts"><a class="header-anchor" href="#without-concepts">#</a> Without Concepts</h2><p>Without a concepts definition, config file would include all concept names. Below you can see that the same information requires a more complex json file without <strong>json concepts</strong>;</p><p><code>SCHEMA: my-app.config.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;environment&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;development&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;database&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;connection&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Server=dev.db;Database=my-app;Uid=...;Pwd=...;&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;production&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;database&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;postgresql&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;connection&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Driver={PostgreSQL};Server=dev.db;Port=5432;Database=my-app;Uid=...;Pwd=...;&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;periods&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;cron&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0 0 12 1/1 * ? *&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;urls&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;https://a.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://b.com&quot;</span> <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;cron&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0 0 0/1 1/1 * ? *&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;urls&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;https://x.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://y.com&quot;</span> <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>On top of having a more complex json file, validation of this file would still be required, whereas <strong>json concepts</strong> always validates a json file before loading. So it improves readability of your configuration file, and provides validation out of the box.</p>',18),t={render:function(n,s){return p}}}}]);