(self.webpackChunkjson_concepts=self.webpackChunkjson_concepts||[]).push([[4378],{778:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-7dfb94d3",path:"/specs/02-quantifiers/01-exactly-one.html",title:"Exactly One",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Missing a Concept",slug:"missing-a-concept",children:[]},{level:2,title:"Missing More Than One Concept",slug:"missing-more-than-one-concept",children:[]},{level:2,title:"Key Literals",slug:"key-literals",children:[]},{level:2,title:"Null Variables",slug:"null-variables",children:[]}],filePathRelative:"specs/02-quantifiers/01-exactly-one.md"}},3732:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="exactly-one"><a class="header-anchor" href="#exactly-one">#</a> Exactly One</h1><p>A concept, by default, requires exactly one instance in every schema. So the following concepts definition expects exactly one <code>$service</code> and <code>$parameter</code> in every schema.</p><p><code>CONCEPTS: service.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$parameter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>We&#39;ve already seen that following schema is valid;</p><p><code>SCHEMA: greeting.service.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;sayHello&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="missing-a-concept"><a class="header-anchor" href="#missing-a-concept">#</a> Missing a Concept</h2><p>However following schema is <strong>not</strong> valid;</p><p><code>SCHEMA: greeting.service.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;sayHello&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Because it is missing a <code>$parameter</code>. Validation should give an error containing the missing concept name;</p><p><code>ERROR: &#39;greeting.service.json&#39; is not valid, &#39;parameter&#39; is missing.</code></p><h2 id="missing-more-than-one-concept"><a class="header-anchor" href="#missing-more-than-one-concept">#</a> Missing More Than One Concept</h2><p>Below schema is missing both <code>$service</code> and a <code>$parameter</code> concepts;</p><p><code>SCHEMA: greeting.service.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Validation should throw an error with message containing <code>service</code>;</p><p><code>ERROR: &#39;greeting.service.json&#39; is not valid, &#39;service&#39; is missing.</code></p><h2 id="key-literals"><a class="header-anchor" href="#key-literals">#</a> Key Literals</h2><p>Just like a concept, a key literal is also required by default;</p><p><code>CONCEPTS: service.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$responseType&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Following schema will <strong>not</strong> be validated;</p><p><code>SCHEMA: greeting.service.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;sayHello&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Error message should contain the missing literal;</p><p><code>ERROR: &#39;greeting.service.json&#39; is not valid, &#39;response&#39; is missing.</code></p><h2 id="null-variables"><a class="header-anchor" href="#null-variables">#</a> Null Variables</h2><p>It is valid to set variables to <code>null</code>. Below concepts has two variables <code>$type</code> and <code>$responseType</code>.</p><p><code>CONCEPTS: service.concepts.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;$parameter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$type&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$responseType&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Below schema is <strong>valid</strong>;</p><p><code>SCHEMA: greeting.service.json</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;sayHello&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>And its shadow is as follows;</p><p><code>SCHEMA SHADOW</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sayHello&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;parameter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;responseType&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',38),p={render:function(s,n){return e}}}}]);